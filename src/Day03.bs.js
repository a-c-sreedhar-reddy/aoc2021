// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Utils = require("./Utils.bs.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var inputLines = Utils.getInputLines("src/input/Day03.txt");

var numberOfDigits = Caml_array.get(inputLines, 0).length;

function convertBinaryArrayToNumber(binaryArray) {
  return binaryArray.reduce((function (acc, curr) {
                if (curr === 1) {
                  return (acc << 1) + 1 | 0;
                } else {
                  return (acc << 1);
                }
              }), 0);
}

var inputLineDigits = inputLines.map(function (line) {
      return line.split("").map(function (digit) {
                  return Belt_Option.getWithDefault(Belt_Int.fromString(digit), 0);
                });
    });

var onesCount = inputLineDigits.reduce((function (acc, curr) {
        curr.forEach(function (digit, index) {
              if (digit === 1) {
                return Caml_array.set(acc, index, Caml_array.get(acc, index) + 1 | 0);
              }
              
            });
        return acc;
      }), Caml_array.make(numberOfDigits, 0));

var gammaRateBinary = onesCount.map(function (count) {
      if (count >= (inputLines.length / 2 | 0)) {
        return 1;
      } else {
        return 0;
      }
    });

var gammaRate = convertBinaryArrayToNumber(gammaRateBinary);

var epsilotRate = convertBinaryArrayToNumber(gammaRateBinary.map(function (digit) {
          if (digit === 1) {
            return 0;
          } else {
            return 1;
          }
        }));

console.log(Math.imul(gammaRate, epsilotRate));

function getOnesCountAtIndex(list, index) {
  return list.filter(function (cur) {
              return Caml_array.get(cur, index) === 1;
            }).length;
}

var oxygen = gammaRateBinary.reduce((function (acc, _cur, index) {
        if (acc.length === 1) {
          return acc;
        }
        var onesCount = getOnesCountAtIndex(acc, index);
        if (onesCount >= (acc.length - onesCount | 0)) {
          return acc.filter(function (digits) {
                      return Caml_array.get(digits, index) === 1;
                    });
        } else {
          return acc.filter(function (digits) {
                      return Caml_array.get(digits, index) === 0;
                    });
        }
      }), inputLineDigits);

var co = gammaRateBinary.reduce((function (acc, _cur, index) {
        if (acc.length === 1) {
          return acc;
        }
        var onesCount = getOnesCountAtIndex(acc, index);
        if (onesCount >= (acc.length - onesCount | 0)) {
          return acc.filter(function (digits) {
                      return Caml_array.get(digits, index) === 0;
                    });
        } else {
          return acc.filter(function (digits) {
                      return Caml_array.get(digits, index) === 1;
                    });
        }
      }), inputLineDigits);

console.log(Math.imul(convertBinaryArrayToNumber(Caml_array.get(oxygen, 0)), convertBinaryArrayToNumber(Caml_array.get(co, 0))));

exports.inputLines = inputLines;
exports.numberOfDigits = numberOfDigits;
exports.convertBinaryArrayToNumber = convertBinaryArrayToNumber;
exports.inputLineDigits = inputLineDigits;
exports.onesCount = onesCount;
exports.gammaRateBinary = gammaRateBinary;
exports.gammaRate = gammaRate;
exports.epsilotRate = epsilotRate;
exports.getOnesCountAtIndex = getOnesCountAtIndex;
exports.oxygen = oxygen;
exports.co = co;
/* inputLines Not a pure module */
