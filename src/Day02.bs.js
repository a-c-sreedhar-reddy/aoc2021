// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var instructions = Fs.readFileSync("./src/Day02.txt", "utf8").split("\n").map(function (instruction) {
      var match = instruction.split(" ");
      if (match.length !== 2) {
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }
      var match$1 = match[0];
      switch (match$1) {
        case "down" :
            var x = match[1];
            return {
                    TAG: /* Down */1,
                    _0: Belt_Option.getWithDefault(Belt_Int.fromString(x), 0)
                  };
        case "forward" :
            var x$1 = match[1];
            return {
                    TAG: /* Forward */0,
                    _0: Belt_Option.getWithDefault(Belt_Int.fromString(x$1), 0)
                  };
        case "up" :
            var x$2 = match[1];
            return {
                    TAG: /* Up */2,
                    _0: Belt_Option.getWithDefault(Belt_Int.fromString(x$2), 0)
                  };
        default:
          throw {
                RE_EXN_ID: "Not_found",
                Error: new Error()
              };
      }
    });

var match = instructions.reduce((function (acc, currentInstruction) {
        var vertical = acc[1];
        var horizontal = acc[0];
        switch (currentInstruction.TAG | 0) {
          case /* Forward */0 :
              return [
                      horizontal + currentInstruction._0 | 0,
                      vertical
                    ];
          case /* Down */1 :
              return [
                      horizontal,
                      vertical + currentInstruction._0 | 0
                    ];
          case /* Up */2 :
              return [
                      horizontal,
                      vertical - currentInstruction._0 | 0
                    ];
          
        }
      }), [
      0,
      0
    ]);

console.log(Math.imul(match[0], match[1]));

var match$1 = instructions.reduce((function (acc, currentInstruction) {
        var aim = acc[2];
        var vertical = acc[1];
        var horizontal = acc[0];
        switch (currentInstruction.TAG | 0) {
          case /* Forward */0 :
              var x = currentInstruction._0;
              return [
                      horizontal + x | 0,
                      vertical + Math.imul(aim, x) | 0,
                      aim
                    ];
          case /* Down */1 :
              return [
                      horizontal,
                      vertical,
                      aim + currentInstruction._0 | 0
                    ];
          case /* Up */2 :
              return [
                      horizontal,
                      vertical,
                      aim - currentInstruction._0 | 0
                    ];
          
        }
      }), [
      0,
      0,
      0
    ]);

var vertical = match$1[1];

var horizontal = match$1[0];

console.log(Math.imul(horizontal, vertical));

exports.instructions = instructions;
exports.horizontal = horizontal;
exports.vertical = vertical;
/* instructions Not a pure module */
